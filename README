NAME
    log - command-line log/journal processing

VERSION
    2.2.8

SYNOPSIS
     log [OPTIONS] [YYYY/MM/DD] [TIME] [TEXT]
     log 10/03 1201 lunch
     log -n :std_nap_string -c very refreshing

DESCRIPTION
    This program facillitates keeping flat-file journals via the command
    line.

  DATES
    If no date is passed, log will use the current date. To add to the log
    of a different date, past or future, you can pass the full date in the
    format YYYY/MM/DD; or only MM/DD and the current year will be used; or
    only DD and the current year and month will be used.

    You may also specify a date differential, which will be *subtracted*
    from the current date (or the date specified in the above format). This
    takes the format -*N*, where N is any integer. It can be specified
    anywhere with other -flag style options.

    The date and date differential, if specified, must be the first
    arguments passed after input flags.

  TIME
    The time of the current entry is automatically generated by the script,
    unless cancelled by one of the input flags (-c, -i, -t ), or unless a
    different time is passed in the format HHMM. It is always 24-hour time.
    If a colon is included (HH:MM), it is automatically removed. The option
    to retain the colon is planned for a future release.

    The -r flag rounds the time to the nearest five minutes.

    Time is ordinarily prepended to the line, followed by a colon and tab
    ("\t") character. You may optionally follow the time with a "~" or "?"
    to indicate approximate or uncertain timing. A '[' may be prepended to
    the time in order to indicate an anticipated event.

    The -n flag appends the time to the end of the entry, rather than the
    beginning.

  SNIPPETS
    Commonly used entries, or parts of entries, may be reused. Place the
    frequently used text in a file in the snippet_dir (see Configuration
    options below, and type :snippet_name on the command line. The script
    will replace :snippet_name with the contents of the file with that name.

    Snippets are recursive as of version 2.2. Currently no checking is done
    to prevent infinite recursion. As of version 2.6, snippet files can be
    organised into subdirectories and called on the command line as
    :dir/file .

    As of v. 2.2.7, snippets may contain system calls. Text between
    `backticks` will be interpreted as a command to be passed to the system;
    its output will be captured and inserted into log's output. NB: NO
    FILTERING OR CHECKING IS CURRENTLY PERFORMED ON SUCH SYSTEM COMMANDS.

  MARKUP
    Markup consists of single-character labels defined in the configuration
    file in order to allow the user (1) to mark content for easy finding
    with a utility such as grep, and (2) to enable colour-coded terminal
    output.

    Markup is identified by the '$' character, so when entering them from
    the command line, this character must be escaped.

    Markup tags can be upper case or lower case. All text between a
    lower-case tag (e.g., '$a') and a '$' not followed by a letter will be
    colour-coded. An upper-case tag has no matching end-tag, and
    colour-codes everything preceeding it on the line. After an upper-case
    tag or the closing '$' of a lower-case tag, the program sends an escape
    sequence to the terminal to return to normal text.

  COMMENTS
    Comments may be added to the log file. To do so, either place the -c
    flag as the first argument, in which case the whole entry will be
    written as a comment, preceded by the comment delimiter (which can be
    specified in the rc file), or else you may place the comment delimiter
    itself, or -c, anywhere within the line of input, in which case all text
    from that point forward will be a comment, without a line break before
    it.

  REPLACING TEXT
    If you use snippets but occasionally wish to modify the text within them
    on a case-by-case basis, use the snippet as usual and then add a
    substitution macro to the input. This takes the form of
    -s/original/replacement/ or -s#original#replacement#. You may specify as
    many such macros within a line of input as you wish; each replacement
    will be performed as many times as possible on the input. No regular
    expressions are evaluated.

OPTIONS
    -a      Cancels the automatic appendage of a newline to the input
            passed.

    -b      Inserts a blank line. If further input is passed, it is
            processed normally and inserted after the blank line.

    -c      Treats the whole line (or anything after -c, which may occur at
            any point in a line) as a comment. -c will be replaced with the
            string specified for denoting comments (default is ;;).

    -e      Deprecated. Outputs the log file. For this functionality see the
            clog script included with this file.

    -h      Prints this help message.

    -i      Indents the line with a tab character.

    -m      Suppresses coloured output of tags (except for comments).

    -n      Appends the current time to the end of the input line, rather
            than placing it at the beginning.

    -p      Prepends predictor_char to the time, to indicate that this time
            value is anticipated in the future.

    -q      Suppresses automatic echoing of the current input line to
            STDOUT.

    -r      Rounds the time to the nearest 5 minutes.

    -s      Silent mode: entry is parsed and echoed to STDOUT but not writen
            to file. Useful for testing the result of commands such as
            recursive snippets or text replacement.

    -t      The current time will not be added to this line.

    -w      The current input line will not be wrapped. Useful for snippets
            which are pre-formatted.

CONFIGURATION OPTIONS
    These options can be placed in ~/.config/logrc, to be read when log
    starts. The configuration file is a Glib key file, divided into
    sections.

    [log] section
            This section is required.

            log_dir The base directory in which log files will be written.
                    Default: ~/docs/log.

            snippet_dir
                    The directory in which snippet files are kept. Default:
                    log_dir/.snippets.

            editor  The executable to use to edit log files using the
                    *editlog.pl* script.

            alternate_editor
                    Alternate editor, used when passing the -a option to the
                    *editlog.pl* script.

            auto_round
                    (Boolean) Automatically round time values to nearest 5
                    minutes. Default: false.

            auto_echo
                    (Boolean) Automatically output the result of the log
                    command to the console as well as to the log file.
                    Default: true.

            mark_rounded
                    (Boolean) Append an indicator to time values when they
                    are rounded. If the -r option is passed or auto_round is
                    set and log is called when rounding would not change the
                    time value (i.e., the current time ends in 0 or 5), no
                    indicator is appended. Default: false.

            rounded_time_char
                    The character appended to time values if mark_rounded is
                    set to true. Default: ~

            comment_char
                    The string used to mark comments. Can be a single
                    character or more. Default: ;;

            predictor_char
                    The single character prepended to time values when the
                    -p option is passed. Default: [

            line_length
                    The number of characters per line, after which lines
                    will be wrapped. Default: 70

            underline_start
                    Terminal escape sequence to turn on underline with the _
                    character.

            underline_end
                    Terminal escape sequence to turn off underlining.

            show_markup
                    (Boolean) Equivalent to -m command-line option. Default:
                    true.

            editlog_create_new
                    (Boolean) Allows the editlog.pl script to create a
                    requested file that does not exist, before opening it in
                    the editor. Default: false.

    [tags] section
            Here the user may define single-character tags to be used (1) to
            facilitate searching log files with e.g. grep, and (2) to enable
            the use of colour-coding. Each tag definition takes the form of
            the character that will be used to represent it and the terminal
            escape sequence for the desired colour.

    [extensions] section
            Here the user may define additional command-line options. Each
            single-character option is given a string that will be the file
            extension of the resulting log entry. This is useful for
            entering more detailed information that does not need to be
            included in the main log file.

AUTHOR
    Written by Ian D. Brunton

REPORTING BUGS
    Report Log bugs to iandbrunton at gmail.com

COPYRIGHT
    Copyright 2011-2012 Ian Brunton.

    This file is part of Log.

    Log is free software: you can redistribute it and/or modify it under the
    terms of the GNU General Public License as published by the Free
    Software Foundation, either version 3 of the License, or (at your
    option) any later version.

    Log is distributed in the hope that it will be useful, but WITHOUT ANY
    WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
    more details.

    You should have received a copy of the GNU General Public License along
    with Log. If not, see <http://www.gnu.org/licenses/>.

